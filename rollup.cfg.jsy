import * as path from 'path'
import app_cfg from './rollup.app.jsy'
import {minify} from 'uglify-es'
import {bundle, buildAll, watchAndBuild} from 'jsy-rollup-bundler'


const rpi = @{}
  babel: require @ 'rollup-plugin-babel'

  resolve: require @ 'rollup-plugin-node-resolve'
  commonjs: require @ 'rollup-plugin-commonjs'

  //virtual_alias: require @ 'rollup-plugin-virtual-alias'
  replace: require @ 'rollup-plugin-replace'

  viz: require @ 'rollup-plugin-visualizer'
  uglify: require @ 'rollup-plugin-uglify'
  progress: require @ 'rollup-plugin-progress'

  hash_n_gzip: require @ 'rollup-plugin-hash-n-gzip'


async function main(argv=process.argv) ::
  const opt = {}
  Object.assign @ opt, app_cfg.opt.common,
    'production' === process.env.NODE_ENV
      ? app_cfg.opt.production
      : app_cfg.opt.development

  try ::
    const bundlers = initBundlers @ opt

    if argv.includes @ '--watch' ::
      const w = watchAndBuild()
      w.restartOn @#
        './package.json'
        './rollup.cfg.jsy'
        './rollup.app.jsy'

      w.buildOnce @ bundlers.once, app_cfg.vendor
      for const ea of bundlers.rebuild ::
        w.rebuildOn @ ea, ea.watch
    else ::
      await buildAll @ bundlers.full
  catch err ::
    console.error @ err
    process.exit(1)



function initBundlers(opt) ::
  if null == opt.outdir ::
    opt.outdir = './dist/public'

  opt.std_plugins = @{}
    pre: pre_plugins(opt).filter(e=>e)
    post: post_plugins(opt).filter(e=>e)

  const once = app_cfg.vendor.map @
    source => bundle_vendor @ opt, source
      
  const rebuild = app_cfg.jsy_roots.map @
    ({roots, watch}) => ::
      const ans = roots.map @ source =>
        bundle_jsy @ opt, source
      ans.watch = watch || roots
      return ans

  console.dir @ rebuild, @{} colors: true
  const full = [].concat @ once, ...rebuild
  return @{} once, rebuild, full



function bundle_vendor(opt, source) ::
  return bundle @: opt, source
    globalModules: opt.globalModules
    plugins: [].concat @
      opt.std_plugins.pre
      opt.std_plugins.post

function bundle_jsy(opt, source) ::
  return bundle @: opt, source
    globalModules: opt.globalModules
    //amd: @: id: source, define: 'awesome'
    plugins: [].concat @
      opt.std_plugins.pre
      @[] jsy_plugin(opt)
      opt.std_plugins.post


function jsy_plugin(opt={}) ::
  return rpi.babel @:
    exclude: 'node_modules/**'
    babelrc: false
    highlightCode: false
    presets: @[]
      @[] 'jsy', @{} no_stage_3: true, modules: false
      @[] 'react'
    plugins: @[] 'external-helpers'


function pre_plugins(opt={}) ::
  return @#
    rpi.replace @:
      'process.env.NODE_ENV': JSON.stringify @
        opt.production ? 'production' : 'development'

    rpi.resolve @:
      browser: true, main: true, module: true, jsnext: true,
      customResolveOptions: @{} basedir: __dirname

    rpi.commonjs @:
      include: 'node_modules/**'


function post_plugins(opt={}) ::
  return @#
    opt.viz &&
      rpi.viz @: filename: `${opt.outdir}/${opt.source.name}${opt.suffix}.stats.html`

    opt.uglify &&
      rpi.uglify @ opt.uglify, minify

    rpi.hash_n_gzip()

    opt.progress &&
      rpi.progress @:
        clearLine: opt.progress.clearLine


if module === require.main :: main()

